diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..777e314
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,38 @@
+{
+    // 使用 IntelliSense 了解相关属性。 
+    // 悬停以查看现有属性的描述。
+    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
+    "version": "0.2.0",
+    "configurations": [
+        {
+            "name": "(gdb) 启动",
+            "type": "cppdbg",
+            "request": "launch",
+            "program": "${workspaceFolder}/kernel.bin",
+            "args": [],
+            "stopAtEntry": false,
+            "cwd": "${fileDirname}",
+            "environment": [],
+            "externalConsole": false,
+            "MIMode": "gdb",
+            "setupCommands": [
+                {
+                    "description": "为 gdb 启用整齐打印",
+                    "text": "-enable-pretty-printing",
+                    "ignoreFailures": true
+                },
+                {
+                    "description": "将反汇编风格设置为 Intel",
+                    "text": "-gdb-set disassembly-flavor intel",
+                    "ignoreFailures": true
+                },
+                {
+                    "description": "连接到 QEMU GDB 服务器",
+                    "text": "target remote localhost:1234",
+                    "ignoreFailures": false
+                },
+            ],
+            "preLaunchTask": "start-qemu"
+        }
+    ]
+}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..afbd8fc
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,11 @@
+{
+    "nasm.extraFlags": [
+        "-I include/"
+    ],
+    "clangd.fallbackFlags": [
+        "-I${workspaceFolder}/include",
+        "-Wno-error=implicit-function-declaration"
+    ],
+    "nasm.outputFormat": "elf32",
+    "debug.allowBreakpointsEverywhere": true
+}
\ No newline at end of file
diff --git a/.vscode/tasks.json b/.vscode/tasks.json
new file mode 100644
index 0000000..d995aaa
--- /dev/null
+++ b/.vscode/tasks.json
@@ -0,0 +1,39 @@
+{
+    "version": "2.0.0",
+    "tasks": [
+        {
+            "label": "make",
+            "type": "shell",
+            "command": "make buildimg",
+            "group": {
+                "kind": "build",
+                "isDefault": true
+            },
+        },
+        {
+            "label": "start-qemu",
+            "type": "shell",
+            "command": "echo 'started' && qemu-system-i386 -drive format=raw,if=floppy,file=a.img -s -S",
+            "isBackground": true,
+            "dependsOn": "make",
+            "problemMatcher": [
+                {
+                    "owner": "custom",
+                    "pattern": [
+                        {
+                            "regexp": ".",
+                            "file": 1,
+                            "location": 2,
+                            "message": 3
+                        }
+                    ],
+                    "background": {
+                        "activeOnStart": true,
+                        "beginsPattern": "started",
+                        "endsPattern": "started"
+                    }
+                }
+            ]
+        }
+    ]
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index b71fda1..ff90fe1 100644
--- a/Makefile
+++ b/Makefile
@@ -33,6 +33,11 @@ OBJS		= kernel/kernel.o kernel/syscall.o kernel/start.o kernel/main.o\
 			lib/kliba.o lib/klib.o lib/string.o lib/misc.o
 DASMOUTPUT	= kernel.bin.asm
 
+ASMKFLAGS   += -g
+CFLAGS      += -fno-stack-protector -m32 -g -fPIC -Wno-error=implicit-function-declaration
+LDFLAGS 	:= $(filter-out -s, $(LDFLAGS))
+LDFLAGS     += -m elf_i386 -g
+
 # All Phony Targets
 .PHONY : everything final image clean realclean disasm all buildimg
 
@@ -42,6 +47,12 @@ nop :
 
 everything : $(ORANGESBOOT) $(ORANGESKERNEL)
 
+run: buildimg
+	qemu-system-i386 -drive format=raw,if=floppy,file=a.img
+
+debug: buildimg
+	qemu-system-i386 -drive format=raw,if=floppy,file=a.img -s -S
+
 all : realclean everything
 
 image : realclean everything clean buildimg
@@ -50,18 +61,16 @@ clean :
 	rm -f $(OBJS)
 
 realclean :
-	rm -f $(OBJS) $(ORANGESBOOT) $(ORANGESKERNEL)
+	rm -f $(OBJS) $(ORANGESBOOT) $(ORANGESKERNEL) a.img
 
 disasm :
 	$(DASM) $(DASMFLAGS) $(ORANGESKERNEL) > $(DASMOUTPUT)
 
-# We assume that "a.img" exists in current folder
-buildimg :
-	dd if=boot/boot.bin of=a.img bs=512 count=1 conv=notrunc
-	sudo mount -o loop a.img /mnt/floppy/
-	sudo cp -fv boot/loader.bin /mnt/floppy/
-	sudo cp -fv kernel.bin /mnt/floppy
-	sudo umount /mnt/floppy
+a.img : a.img.gz
+	gzip -cd a.img.gz > a.img
+
+buildimg : a.img $(ORANGESBOOT) $(ORANGESKERNEL)
+	scripts/buildimg.sh
 
 boot/boot.bin : boot/boot.asm boot/include/load.inc boot/include/fat12hdr.inc
 	$(ASM) $(ASMBFLAGS) -o $@ $<
diff --git a/kernel/clock.c b/kernel/clock.c
index 3968b91..20bd533 100644
--- a/kernel/clock.c
+++ b/kernel/clock.c
@@ -43,7 +43,7 @@ PUBLIC void milli_delay(int milli_sec)
 {
         int t = get_ticks();
 
-        while(((get_ticks() - t) * 1000 / HZ) < milli_sec) {}
+        while(((get_ticks() - t) * 1000 / HZ) < milli_sec) {delay(1);}
 }
 
 /*======================================================================*
diff --git a/scripts/buildimg.sh b/scripts/buildimg.sh
new file mode 100755
index 0000000..4710870
--- /dev/null
+++ b/scripts/buildimg.sh
@@ -0,0 +1,8 @@
+#!/bin/bash
+dd if=boot/boot.bin of=a.img bs=512 count=1 conv=notrunc
+LOOPDEV=$(udisksctl loop-setup -f a.img | grep -o '/dev/loop[0-9]*')
+MOUNTPOINT=$(udisksctl mount -b ${LOOPDEV} | grep -o "/run/media/$USER/[a-zA-Z0-9]*")
+cp -fv boot/loader.bin ${MOUNTPOINT}
+cp -fv kernel.bin ${MOUNTPOINT}
+udisksctl unmount -b ${LOOPDEV}
+udisksctl loop-delete -b ${LOOPDEV}
\ No newline at end of file
